Spring Distributed Locks
------------------------
1)	it is avoid the multiple updates by the highly available microservice architecture

2)	configure the distributed locking machanism

	@Configuration
	public class DistributedLocksConfiguration {

		@Bean
		public DefaultLockRepository DefaultLockRepository(DataSource dataSource) {
			return new DefaultLockRepository(dataSource);
		}

		@Bean
		public JdbcLockRegistry jdbcLockRegistry(LockRepository lockRepository) {
			return new JdbcLockRegistry(lockRepository);
		}

	}
	
3)	configure the LockRegistry

	@Autowired
	private LockRegistry lockRegistry;

	public void m1(Long id) throws InterruptedException {
		var lock = lockRegistry.obtain(String.valueOf(id));
		boolean lockAquired = lock.tryLock();
		if (lockAquired) {
			//do the operation
		}
		else
		{
			System.out.println("cannot get the lock");
		}
	}
	
4)	it uses the db table to track the locks. this will be created by spring integration.

	CREATE TABLE `int_lock` (
	  `LOCK_KEY` char(36) NOT NULL,
	  `REGION` varchar(100) NOT NULL,
	  `CLIENT_ID` char(36) DEFAULT NULL,
	  `CREATED_DATE` timestamp NOT NULL,
	  PRIMARY KEY (`LOCK_KEY`,`REGION`)
	)
Spring - kafka example
----------------------
1)	create spring project 

2)	add the dependencies in the pom.xml

		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		
3)	get the kafka template. here this template deals with string key and value pair.

		@Autowired
		KafkaTemplate<String, String> template;
			
4)	send the data using 

		template.send("topic1", msg);
		
5)	create kafka listner using @KafkaListener

		@KafkaListener(id = "myId", topics = "topic1")
		public void listen(String in) {
			System.out.println(in);
		}
		
=====================================================
application.properties 
----------------------
spring.kafka.properties.bootstrap.servers=localhost:9092

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.client-id=spring-boot-producer

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

public class StudentProducer {
	
	@Autowired
	KafkaTemplate<String,Student> kafkaTemplate;
	
	@GetMapping("/{id}/{name}")
	public ResponseEntity<String> sendMsg(@PathVariable int id,@PathVariable String name){
		Student s = new Student(id,name);
		this.kafkaTemplate.send("topic1",s);
		return ResponseEntity.status(HttpStatus.OK).body("success");
	}

}


@Service
public class StudentConsumer {
	
	@KafkaListener(topics = {"topic1"} , groupId = "spring-boot-kafka")
	public void consume(Student s) {
        System.out.println("received= " + s);
    } 

}		